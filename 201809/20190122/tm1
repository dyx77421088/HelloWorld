import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();//n场会议
		List<Hy> list = new ArrayList<Hy>();
		for(int i = 0;i < n;++i) {
			list.add(new Hy(sc.nextInt(),sc.nextInt()));
		}
		Collections.sort(list, new Comparator<Hy>() {//按照会议的起始时间排序,最先开始的放在前面
			public int compare(Hy o1, Hy o2) {
				if(o1.start != o2.start)
					return o1.start - o2.start;
				else
					return o1.end - o2.end;
			}
		});
		
		int []f = new int[n];//n场会议中的最优解
		int start = -1;//当前会议的开始时间
		int max = 1;//最大值
		for(int i = 0;i < list.size();++i) {
			f[i] = 1;//最少可以参加当前会议(即1场会议)
			if(start == list.get(i).start) {
				continue;//因为排过序,所以开始时间相同的情况下,后面的结束时间肯定比前面的结束时间要长
				//如     1  2
				//	   1  3   那么我们可以不用考虑(1,3)这种情况
			} else {
				start = list.get(i).start;
			}
			for(int j = 0;j < i;++j) {//与前面的会议的时间相比较
				if(list.get(j).end <= start) {//如果前面会议的结束时间可以接上这场会议的开始时间,那么就是可取的
					f[i] = Math.max(f[i], f[j] + 1);//前面会议的时间加一和当前会议相比较  取最大值
				}
			}
			max = Math.max(max, f[i]);
		}
		System.out.println(max);
		sc.close();
	}

	static class Hy {
		int start;//会议的起始时间
		int end;//会议的结束时间
		public Hy(int start, int end) {
			this.start = start;
			this.end = end;
		}
	}
}
